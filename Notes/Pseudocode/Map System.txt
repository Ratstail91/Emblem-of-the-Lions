This game doesn't need the world's most fancy map system, it just needs to *work correctly*.
Don't be afraid of hardcoding for now.

Necessary:
	Load the map data
	Display the map

Expected:
	Save the map data (simple map editor)
	Handle collision data (separate "layer")

Several layers:
	1: base layer
	2: detail layer
	-: Entities
	3: overlay (displayed above entities)
	4: collision (binary)

-------------------------

Tile:
	x, y
	val
end

Region:
	LoadData(fname)
	SaveData(fname)
	NewData(x, y, z)
	DeleteData()
	
	SetTile(x, y, z, v)
	GetTile(x, y, z)
	
	GetX()
	GetY()
	GetZ()
	GetSize()
	
	Begin()
	End()
	
	int xCount, yCount, zCount, size
	Region* data
end

MapUtility:
	LoadMap(fname)
	SaveMap(fname)
	NewMap(mapX, mapY, regionX, regionY, regionZ)
	DeleteMap()
	
	SetTile(x, y, z, v)
	GetTile(x, y, z) //inefficient?
	GetRegion(x, y)
	??
	
	TODO: Region needs a X & Y members. See Outline.txt

-------------------------

Pagination Pseudocode

One dimension:
	If a Region is at a distance of 1 or less, load it
	If a Region is at a distance of 3 or more, unload it
end

Two dimensions:
	It's simpler to just use the 1D system in both directions. Don't worry about it too much.
end
