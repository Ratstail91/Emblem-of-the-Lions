This game doesn't need the world's most fancy map system, it just needs to *work correctly*.
Don't be afraid of messing up.

Necessary:
	Load the map data
	Display the map

Expected:
	Save the map data (simple map editor)
	Handle collision data (separate "layer")

Several layers:
	1: base layer
	2: detail layer
	-: Entities
	3: overlay (displayed above entities)
	4: collision (binary)

-------------------------

Pagination Pseudocode:
	If a Region is at a distance of 1 or less, load it
	If a Region is at a distance of 3 or more, unload it
end

-------------------------

Save File Format

The maps will be saved into their own directory. The file "index.txt" will hold the x, y and z values of the
regions. Later it could hold other metadata. The values derived from this file are used to validate the region
files. The region files are named as x.y.region where x is the region's x index, and y is it's y index.

For large maps that are being edited, the regions can be stored as x.y.tmp until the map as a whole is saved.

Directory
	mapname/*.*
end

map file: index.txt
	regionX regionY regionZ
end

region file: x.y.region
	regionX regionY regionZ
	[raw data] TODO figure out this data structure
end

-------------------------

Region Management?

CheckRegionExists(x, y)
CheckRegionLoaded(x, y)

NewRegion(x, y)
LoadRegion(x, y)
SaveRegion(x, y)
UnloadRegion(x, y) //save first
GetRegion(x, y)

-------------------------

