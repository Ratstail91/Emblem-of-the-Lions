This game doesn't need the world's most fancy map system, it just needs to *work correctly*.
Don't be afraid of hardcoding for now.

Necessary:
	Load the map data
	Display the map

Expected:
	Save the map data (simple map editor)
	Handle collision data (separate "layer")

Several layers:
	1: base layer
	2: detail layer
	-: Entities
	3: overlay (displayed above entities)
	4: collision (binary)

-------------------------

Tile:
	x, y, z
	val
end

Region:
	LoadData(fname)
	SaveData(fname)
	NewData(x, y, z)
	DeleteData()
	
	SetTile(x, y, z, v)
	GetTile(x, y, z)
	
	GetX()
	GetY()
	GetZ()
	GetSize()
	
	SetIndexX(indexX)
	SetIndexY(indexY)
	GetIndexX()
	GetIndexY()
	
	Begin()
	End()
	
	int indexX, indexY
	int xCount, yCount, zCount, size
	Region* data
end

MapUtility:
	NewMap(mapname, regionX, regionY, regionZ)
	LoadMap(mapname)
	SaveMap()
	FreeMap()
	DeleteMap(mapname)
	
	//control the list of regions
	NewRegion		(indexX, indexY)
	LoadRegion		(indexX, indexY)
	SaveRegion		(indexX, indexY)
	UnloadRegion	(indexX, indexY)
	GetRegion		(indexX, indexY)
	
//	//this is the process of unloading Regions that are out of sight
//	//it's best to call this only when the player crosses an edge line, but it should work at any time
//	//centerX and centerY are the indexes of the "center" region. This region is the watermark for
//	//loading and unloading other regions
//	//it could also have some min & max parameters, to dictate how close & far the cull limits are.
//	CullMap(centerX, centerY, min = 1, max = 2)
	
	//curry a long line
	SetTile(x, y, z, v)
	GetTile(x, y, z)
	
	int regionX, regionY, regionZ
	std::vector<Region*> regionList
	string mapName
end

-------------------------

Pagination Pseudocode:
	If a Region is at a distance of 1 or less, load it
	If a Region is at a distance of 3 or more, unload it
end

-------------------------

Save File Format

The maps will be saved into their own directory. The file "index.txt" will hold the x, y and z values of the
regions. Later it could hold other metadata. The values derived from this file are used to validate the region
files. The region files are named as x.y.region where x is the region's x index, and y is it's y index.

For large maps that are being edited, the regions can be stored as x.y.tmp until the map as a whole is saved.

Directory
	mapname/*.*
end

map file: index.txt
	regionX regionY regionZ
end

region file: x.y.region
	regionX regionY regionZ
	[raw data] TODO figure out this data structure
end

-------------------------

Region Management

CheckRegionExists(x, y)
CheckRegionLoaded(x, y)

NewRegion(x, y)
LoadRegion(x, y)
SaveRegion(x, y)
UnloadRegion(x, y) //save first
GetRegion(x, y)
